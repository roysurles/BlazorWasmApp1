@page "/fetchdata2"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using BlazorWasmApp1.Shared
@*@attribute [Authorize(Policy = "SuperUser")]*@
@*@attribute [Authorize(Roles = "Admin")]*@
@attribute [Authorize]
@inject IHttpClientFactory HttpClientFactory
@inject BlazorWasmApp1CoreApiClient BlazorWasmApp1CoreApiClient
@inject IAccessTokenProvider AccessTokenProvider
@inject IJSRuntime JSRuntime
@inject ILogger<FetchData2> Logger



<h1>Weather forecast 2 - https://localhost:44390/weatherforecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <br />

    <p>@HttpClient.BaseAddress</p>


    @if (ApiResultModel != null)
    {
        <br />
        <h4>Messages</h4>
        <ul>
            @foreach (var message in ApiResultModel.Messages)
            {
                <li><span><bold>@message.MessageType</bold>: @message?.Message</span></li>
            }
        </ul>
    }

    <h4>Json</h4>
    <span>@Json</span>
}

@code {
    private IEnumerable<WeatherForecast> forecasts;
    //private WeatherForecast[] forecasts;

    protected HttpClient HttpClient { get; set; }

    protected ApiResultModel<IEnumerable<WeatherForecast>> ApiResultModel { get; set; }

    protected string Json { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            //ApiResultModel = await BlazorWasmApp1CoreApiClient.HttpClient.GetAsyncEx<IEnumerable<WeatherForecast>>("api/V1/WeatherForecast", Logger);
            //Logger.LogInformation($"ApiResultModel is {(ApiResultModel is null ? "NULL" : "DATA")}");
            //forecasts = ApiResultModel.Data;
            //Logger.LogInformation($"forecasts.Count: {forecasts.Count()}");
            //return;


            Logger.LogInformation("HttpClientFactory.CreateClient(\"BlazorWasmApp1.CoreAPI\")");
            HttpClient = HttpClientFactory.CreateClient("BlazorWasmApp1.CoreAPI");

            ApiResultModel = await HttpClient.GetAsyncEx<IEnumerable<WeatherForecast>>("api/V1/WeatherForecast", Logger);
            forecasts = ApiResultModel.Data;
            return;

            //HttpClient.BaseAddress = new Uri("https://localhost:44390/");
            //forecasts = await HttpClient.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
            //Logger.LogInformation("var ApiResultModel = await HttpClient.GetFromJsonAsync<ApiResultModel<IEnumerable<WeatherForecast>>>(\"WeatherForecast\");");
            //var ApiResultModel = await HttpClient.GetFromJsonAsync<ApiResultModel<IEnumerable<WeatherForecast>>>("WeatherForecast");

            //var requestAccessTokenResult = await AccessTokenProvider.RequestAccessToken();
            //requestAccessTokenResult.TryGetToken(out AccessToken accessToken);
            //HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken.Value);


            Logger.LogInformation("var response = await HttpClient.GetAsync(\"WeatherForecast\");");
            using (var response = await HttpClient.GetAsync("api/V1/WeatherForecast"))
            {
                Logger.LogInformation($"response.IsSuccessStatusCode:{response.IsSuccessStatusCode}");
                Logger.LogInformation($"response.StatusCode:{response.StatusCode}");
                if (response.IsSuccessStatusCode)
                {
                    Logger.LogInformation("await response.Content.ReadAsStringAsync();");
                    Json = await response.Content.ReadAsStringAsync();
                    Logger.LogInformation("ApiResultModel = Json.Deserialize<ApiResultModel<IEnumerable<WeatherForecast>>>();");
                    ApiResultModel = Json.Deserialize<ApiResultModel<IEnumerable<WeatherForecast>>>();
                    Logger.LogInformation($"ApiResultModel is {(ApiResultModel is null ? "NULL" : "DATA")}");
                    Logger.LogInformation($"ApiResultModel.Messages.Count {(ApiResultModel.Messages?.Count() ?? 0)}");
                    Logger.LogInformation($"ApiResultModel.Messages[0].Message {(ApiResultModel.Messages[0].Message)}");
                    Logger.LogInformation($"ApiResultModel.Messages[0].MessageType {(ApiResultModel.Messages[0].MessageType)}");
                    //Logger.LogInformation($"ApiResultModel.Messages[1].Message {(ApiResultModel.Messages[0].UnhandledException.Message)}");
                    Logger.LogInformation($"ApiResultModel.Messages[1].MessageType {(ApiResultModel.Messages[0].MessageType)}");
                    forecasts = ApiResultModel.Data;
                    Logger.LogInformation($"forecasts.Count: {forecasts.Count()}");
                }
            }

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"*** FetchData.razor encountered exception:  {ex.Message}");
            var message = ex.Message;
        }
    }

}
